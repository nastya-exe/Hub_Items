from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.enums.parse_mode import ParseMode

from database import SessionLocal
from models import Transaction
import asyncio

from pdf_utils import generate_pdf
import os

bot = Bot(token="–¢–í–û–ô_–¢–û–ö–ï–ù", parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class FinanceForm(StatesGroup):
    type = State()
    amount = State()
    category = State()
    description = State()

@dp.message(commands=["start"])
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã.\n\n–ù–∞–ø–∏—à–∏ /add —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.")

@dp.message(commands=["add"])
async def cmd_add(message: Message, state: FSMContext):
    await state.set_state(FinanceForm.type)
    await message.answer("–≠—Ç–æ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥? –ù–∞–ø–∏—à–∏ <b>–¥–æ—Ö–æ–¥</b> –∏–ª–∏ <b>—Ä–∞—Å—Ö–æ–¥</b>.")

@dp.message(FinanceForm.type)
async def process_type(message: Message, state: FSMContext):
    text = message.text.lower()
    if text not in ("–¥–æ—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥"):
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ <b>–¥–æ—Ö–æ–¥</b> –∏–ª–∏ <b>—Ä–∞—Å—Ö–æ–¥</b>.")
    await state.update_data(type=text)
    await state.set_state(FinanceForm.amount)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É:")

@dp.message(FinanceForm.amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        await state.update_data(amount=amount)
        await state.set_state(FinanceForm.category)
        await message.answer("–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∞—Ä–µ–Ω–¥–∞, —Ä–µ–∫–ª–∞–º–∞, —É—Å–ª—É–≥–∏):")
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")

@dp.message(FinanceForm.category)
async def process_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(FinanceForm.description)
    await message.answer("–î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ - —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")

@dp.message(FinanceForm.description)
async def process_description(message: Message, state: FSMContext):
    data = await state.get_data()
    description = message.text if message.text != "-" else ""
    data["description"] = description

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with SessionLocal() as session:
        transaction = Transaction(
            user_id=message.from_user.id,
            type=data["type"],
            amount=data["amount"],
            category=data["category"],
            description=description
        )
        session.add(transaction)
        await session.commit()

    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
        f"<b>{data['type'].capitalize()}</b> ‚Äî {data['amount']}‚ÇΩ\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description or '‚Äî'}"
    )
    await state.clear()

@dp.message(commands=["report"])
async def send_report(message: types.Message):
    async with SessionLocal() as session:
        result = await session.execute(
            select(Transaction).where(Transaction.user_id == message.from_user.id).order_by(Transaction.created_at)
        )
        transactions = result.scalars().all()

        if not transactions:
            return await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

        file_path = f"report_{message.from_user.id}.pdf"
        generate_pdf(transactions, file_path)

        await message.answer_document(types.FSInputFile(file_path), caption="–¢–≤–æ–π PDF-–æ—Ç—á—ë—Ç üìÑ")
        os.remove(file_path)